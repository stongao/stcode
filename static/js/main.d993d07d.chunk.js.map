{"version":3,"sources":["components/Loading.jsx","components/LoksabhaMap.jsx","tasks/LoadStatesTask.js","entities/LegendItem.js","components/Loksabha.jsx","entities/LegendItems.js","App.js","reportWebVitals.js","index.js"],"names":["Loading","style","height","display","justifyContent","alignItems","className","role","LoksabhaMap","states","MapContainer","center","zoom","GeoJSON","data","fillColor","weight","color","fillOpacity","onEachFeature","state","layer","displayProp","properties","pc_name_hi","bindPopup","LoadStatesTask","load","setState","features","LegendItem","title","isFor","textColor","this","Loksabha","density","useState","setStates","useEffect","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAYeA,EAVC,WACZ,OACA,qBAAKC,MAAO,CAAEC,OAAQ,QAASC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,UAAtF,SACI,qBAAKC,UAAU,iBAAiBC,KAAK,SAArC,SACI,sBAAMD,UAAU,kBAAhB,6B,gBCsBGE,G,YAvBK,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAgBlB,OACI,cAACC,EAAA,EAAD,CAAcC,OAhBD,CAAC,GAAI,MAgBcC,KAAM,EAAtC,SACI,cAACC,EAAA,EAAD,CAASC,KAAML,EAAQR,MAhBd,CACbc,UAAW,QACXC,OAAQ,EACRC,MAAO,QACPC,YAAa,GAY+BC,cAR5B,SAACC,EAAOC,GAExB,IAAMC,EAAcF,EAAMG,WAAWC,WACrCH,EAAMI,UAAN,UAAmBH,W,cCaZI,E,sCALXC,KAAO,SAACC,GACJA,EAASC,OClBFC,EARX,WAAYC,EAAOd,EAAOe,EAAOC,GAAW,oBACxCC,KAAKH,MAAQA,EACbG,KAAKjB,MAAQA,EACbiB,KAAKF,MAAQA,EACbE,KAAKD,UAAyB,MAAbA,EAAmBA,EAAY,SCiBzCE,GCnBX,IAAIL,EACA,OAAQ,WAAW,SAACM,GAAD,OAAaA,GAAW,MAAK,SAEpD,IAAIN,EACA,UAAW,WAAW,SAACM,GAAD,OAAaA,EAAU,KAAOA,GAAW,MAAK,SAExE,IAAIN,EACA,SAAU,WAAW,SAACM,GAAD,OAAaA,EAAU,KAAOA,GAAW,KAAI,SAEtE,IAAIN,EACA,QAAS,WAAW,SAACM,GAAD,OAAaA,EAAU,IAAMA,GAAW,KAAI,SAEpE,IAAIN,EACA,MAAO,WAAW,SAACM,GAAD,OAAaA,EAAU,KAAI,SDTpC,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACZ5B,EADY,KACJ6B,EADI,KAUnB,OAFAC,qBALa,YACc,IAAIb,GACZC,KAAKW,KAGR,IAET,oCACe,IAAlB7B,EAAO+B,OAAe,cAAC,EAAD,IAAY,8BAAK,cAAC,EAAD,CAAa/B,OAAQA,MADzD,SEVIgC,MAJf,WACE,OAAO,cAAC,EAAD,KCQMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d993d07d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Loading = () => {\n    return ( \n    <div style={{ height: \"100vh\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n        <div className=\"spinner-border\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </div>\n    </div>  \n    );\n}\n \nexport default Loading;","import React from \"react\";\nimport { MapContainer, GeoJSON } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./LoksabhaMap.css\";\n\nconst LoksabhaMap = ({states}) => {\n    const position = [23, 80.1]\n    const mapStyle = {\n        fillColor: \"white\",\n        weight: 1,\n        color: \"black\",\n        fillOpacity: 1\n    };\n\n\n    const onEachState = (state, layer) => {\n        //layer.options.fillColor = state.properties.color;\n        const displayProp = state.properties.pc_name_hi;\n        layer.bindPopup(`${displayProp}`);\n    };\n\n    return ( \n        <MapContainer center={position} zoom={5}>\n            <GeoJSON data={states} style={mapStyle} onEachFeature={onEachState}/>\n        </MapContainer>\n      );\n}\n \nexport default LoksabhaMap;","import { features } from \"../data/loksabha-map.json\";\n//import legendItems from \"../entities/LegendItems\";\n\n/*\nclass LoadStatesTask {\n    load = (setState) => {\n        const mapStates = features\n\n        for (let i = 0; i < mapStates.length; i++) {\n            const mapState = mapStates[i]\n            this.#setColor(mapState)\n        }\n\n        setState(mapStates)\n    };\n\n    #setColor = (mapState) => {\n        const legendItem = legendItems.find((legendItem)=> \n            legendItem.isFor(mapState.properties.density)\n        );\n        mapState.properties.color = legendItem.color;\n    }\n}\n*/\n\nclass LoadStatesTask {\n    load = (setState) => {\n        setState(features)\n    };\n}\n\nexport default LoadStatesTask;","class LegendItem {\n    constructor(title, color, isFor, textColor){\n        this.title = title;\n        this.color = color;\n        this.isFor = isFor;\n        this.textColor = textColor != null? textColor : \"white\";\n    }\n}\n\nexport default LegendItem;","import React, {useState, useEffect} from 'react';\nimport Loading from \"./Loading\";\nimport LoksabhaMap from \"./LoksabhaMap\";\nimport Legend from \"./Legend\"\nimport LoadStatesTask from '../tasks/LoadStatesTask';\nimport legendItems from \"../entities/LegendItems\";\n\nconst Loksabha = () => {\n    const [states, setStates] = useState([]);\n    //const legendItemsInReverse = [...legendItems].reverse();\n    const load = () => {\n        const loadStatesTask = new LoadStatesTask();\n        loadStatesTask.load(setStates);\n    }\n\n    useEffect(load, []);\n\n    return <div> {\n        states.length === 0 ? <Loading/>: <div><LoksabhaMap states={states}/></div>\n    } </div>\n}\n\nexport default Loksabha;\n","import LegendItem from \"./LegendItem\";\n\nconst legendItems = [\n    new LegendItem(\n        \"200+\", \"#741f1f\", (density) => density >= 200, \"white\"\n    ),\n    new LegendItem(\n        \"100-200\", \"#9c2929\", (density) => density < 200 && density >= 100, \"white\"\n    ),\n    new LegendItem(\n        \"50-100\", \"#c57f7f\", (density) => density < 100 && density >= 50, \"black\"\n    ),\n    new LegendItem(\n        \"25-50\", \"#ebd4d4\", (density) => density < 50 && density >= 25, \"black\"\n    ),\n    new LegendItem(\n        \"<25\", \"#ffffff\", (density) => density < 25, \"black\"\n    )\n];\n\nexport default legendItems;","import React from 'react';\nimport Loksabha from  \"./components/Loksabha\";\n\nfunction App() {\n  return <Loksabha /> ;\n}\n\nexport default App;\n\n\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}